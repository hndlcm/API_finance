import requests
import time
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from config import CONFIG


def format_amount(value):
    try:
        return round(float(value), 2)
    except (ValueError, TypeError):
        return 0.00


def export_erc20_to_google_sheet():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
    sheet_conf = CONFIG["google_sheet"]
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(sheet_conf["credentials_path"], scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open_by_url(sheet_conf["spreadsheet_url"])
    worksheet = spreadsheet.worksheet(sheet_conf["worksheet_name"])

    erc20_entries = CONFIG.get("ERC20", [])
    if not erc20_entries:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö ERC20 –∞–∫–∞—É–Ω—Ç—ñ–≤ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.")
        return

    existing_rows = worksheet.get_all_values()
    header_offset = 1
    existing_tx_by_hash = {}
    for i, row in enumerate(existing_rows[header_offset:], start=header_offset + 1):
        full_row = row + [""] * (25 - len(row))
        tx_hash = full_row[16]
        if tx_hash:
            existing_tx_by_hash[tx_hash] = {"row_number": i, "row_data": full_row}

    for entry in erc20_entries:
        address = entry["address"]
        api_key = entry["api_key"]
        date_str = entry.get("data")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É
        if not date_str:
            config_date = datetime.now().date()
        else:
            try:
                config_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            except Exception:
                print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É: {date_str}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É")
                config_date = datetime.now().date()

        # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ 5 –¥–Ω—ñ–≤ –¥–ª—è –ø–æ—á–∞—Ç–∫—É —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
        from_date = config_date - timedelta(days=5)
        to_date = config_date

        print(f"\nüîç –û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏ {address} ({entry.get('name', '')}), –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {from_date} - {to_date}")

        page = 1
        all_transactions = []

        while True:
            url = (
                f"https://api.etherscan.io/api"
                f"?module=account&action=tokentx&address={address}"
                f"&startblock=0&endblock=99999999&page={page}&offset=100&sort=asc"
                f"&apikey={api_key}"
            )
            response = requests.get(url)
            if response.status_code != 200:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ:", response.status_code)
                break
            result = response.json()
            transactions = result.get("result", [])
            if not transactions:
                break

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø–æ –¥–∞—Ç—ñ (timestamp —É —Å–µ–∫—É–Ω–¥–∞—Ö)
            filtered_transactions = []
            for tx in transactions:
                ts = int(tx.get("timeStamp", 0))
                tx_date = datetime.utcfromtimestamp(ts).date()
                if from_date <= tx_date <= to_date:
                    filtered_transactions.append(tx)
                elif tx_date > to_date:
                    # –û—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ, —è–∫—â–æ –¥–∞—Ç–∞ –±—ñ–ª—å—à–∞ –∑–∞ to_date ‚Äî –º–æ–∂–Ω–∞ –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É —Å—Ç–æ—Ä—ñ–Ω–æ–∫
                    break

            all_transactions.extend(filtered_transactions)
            print(f"üîÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}: –û—Ç—Ä–∏–º–∞–Ω–æ {len(filtered_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–≤—Å—å–æ–≥–æ: {len(all_transactions)})")

            # –Ø–∫—â–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –º–µ–Ω—à–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∞–±–æ –¥–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ
            if len(transactions) < 100 or any(datetime.utcfromtimestamp(int(tx.get("timeStamp",0))).date() > to_date for tx in transactions):
                break

            page += 1
            time.sleep(0.3)

        rows_to_update = []
        rows_to_append = []

        for tx in all_transactions:
            timestamp = datetime.fromtimestamp(int(tx["timeStamp"])).strftime("%d.%m.%Y %H:%M:%S")
            token_symbol = tx.get("tokenSymbol", "UNKNOWN")
            token_decimal = int(tx.get("tokenDecimal", "6"))
            from_address, to_address = tx.get("from", ""), tx.get("to", "")
            tx_hash = tx.get("hash", "")
            try:
                amount = int(tx.get("value", "0")) / (10 ** token_decimal)
            except Exception:
                amount = 0

            type_operation = "debit" if to_address.lower() == address.lower() else "credit"
            counterparty = to_address if type_operation == "credit" else from_address
            formatted_amount = abs(format_amount(amount))

            row = [""] * 25
            row[0] = timestamp
            row[1] = "ERC20"
            row[3] = address
            row[4] = type_operation
            row[5] = formatted_amount
            row[6] = formatted_amount
            row[7] = token_symbol
            row[13] = counterparty
            row[16] = tx_hash

            if tx_hash in existing_tx_by_hash:
                existing = existing_tx_by_hash[tx_hash]
                if row != existing["row_data"]:
                    rows_to_update.append((existing["row_number"], row))
            else:
                rows_to_append.append(row)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫—ñ–≤
        if rows_to_update:
            batch_data = [{"range": f"A{row_number}:Y{row_number}", "values": [row_data]} for row_number, row_data in rows_to_update]
            worksheet.batch_update(batch_data)
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–æ {len(rows_to_update)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö
        if rows_to_append:
            start_row = len(existing_rows) + 1
            worksheet.update(f"A{start_row}:Y{start_row + len(rows_to_append) - 1}", rows_to_append)
            print(f"‚ûï –î–æ–¥–∞–Ω–æ {len(rows_to_append)} –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ä—è–¥–∫–∞ {start_row}.")
        else:
            print("‚úÖ –ù–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î.")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        today_str = datetime.now().strftime("%d.%m.%Y")
        entry["data"] = today_str
        print(f"üìÜ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –≤ –∫–æ–Ω—Ñ—ñ–≥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_str}")

