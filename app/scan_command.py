import logging

from google.cloud import bigquery
from google.oauth2 import service_account

from .bigquery_table import Table
from .payment_config import load_config
from .payments import BitfakturaScanner
from .schemas import TransactionRecord
from .settings import Settings

logger = logging.getLogger(__name__)


def scan_command(settings: Settings):
    payment_config = load_config(settings.payment_config_file)
    transactions = []
    logger.info("Scanning payment systems ...")

    scanner_types = [
        # PrivatScanner,
        # MonoScanner,
        # TRC20Scanner,
        BitfakturaScanner,
    ]
    for ScannerType in scanner_types:
        if items := payment_config.root.get(ScannerType.KEY):
            try:
                scanner = ScannerType(items)
                records: list[TransactionRecord] = scanner.scan()
                transactions.extend(records)
            except Exception as e:
                logger.error("%s %s", type(e), e)
                raise e

    if not transactions:
        logger.warning("No transactions.")
        return

    logger.info("Connecting to BigQuery ...")
    credentials = service_account.Credentials.from_service_account_file(
        str(settings.big_query_cred_file)
    )
    client = bigquery.Client(credentials.project_id, credentials)

    logger.info("Inserting and updating transactions in BigQuery table ...")
    table = Table(
        table_id=settings.big_query_table_id,
        pydantic_cls=TransactionRecord,
        primary_keys=["transaction_id", "bank_or_system"],
        client=client,
    )
    table.upsert_records(transactions)


# try:
#     print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç —ñ–Ω–≤–æ–π—Å—ñ–≤ Bitfactura...")
#     export_bitfactura_all_to_google_sheets()
#     print("‚úÖ –ï–∫—Å–ø–æ—Ä—Ç —ñ–Ω–≤–æ–π—Å—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n")
# except Exception as e:
#     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ Bitfactura: {e}\n")
#
# try:
#     export_erc20_to_google_sheet()
# except Exception as e:
#     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ ERC20: {e}")
#
# try:
#     export_trc20_transactions_troscan_to_google_sheets()
# except Exception as e:
#     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ TRC20 Tronscan: {e}")
#
# try:
#     print(
#         "üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç –∑–∞–º–æ–≤–ª–µ–Ω—å Portmone –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ä–æ–∫–∏..."
#     )
#     export_portmone_orders_full()
#
#     print("‚úÖ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–º–æ–≤–ª–µ–Ω—å Portmone –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n")
# except Exception as e:
#     print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ Portmone: {e}\n")
#
# print("‚è∞ –ß–µ–∫–∞—î–º–æ 1 –≥–æ–¥–∏–Ω—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É...\n")
# time.sleep(3600)
