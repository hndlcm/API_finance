import time
import requests
from datetime import datetime, timedelta
from config_manager import CONFIG, config_manager  
from table import init_google_sheet


def format_amount(value):
    try:
        return round(float(value), 2)
    except (ValueError, TypeError):
        return 0.0


def fetch_monobank_transactions(api_key, from_time, to_time, max_retries=5):
    headers = {"X-Token": api_key}
    url = f"https://api.monobank.ua/personal/statement/0/{from_time}/{to_time}"
    retries = 0
    wait_time = 2  # –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–∞—É–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    while retries <= max_retries:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 429:
            print(f"‚ö†Ô∏è –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ Mono API –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ. –û—á—ñ–∫—É—î–º–æ {wait_time} —Å–µ–∫—É–Ω–¥ —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É...")
            time.sleep(wait_time)
            retries += 1
            wait_time *= 2  # –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–∏–π backoff
        else:
            raise Exception(f"–ü–æ–º–∏–ª–∫–∞ API Mono: {response.status_code} - {response.text}")

    raise Exception("–ü—Ä–µ–≤–∏—â–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É 429.")


def export_mono_transactions_to_google_sheets():
    mono_entries = CONFIG.get("MONO", [])
    if not mono_entries:
        print("‚ö†Ô∏è MONO –≥–∞–º–∞–Ω—Ü—ñ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    worksheet = init_google_sheet()

    for item in mono_entries:
        api_key = item.get("api_token")
        if not api_key:
            print("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π api_token —É –∫–æ–Ω—Ñ—ñ–≥—É Mono.")
            continue

        date_str = item.get("data")
        try:
            config_date = datetime.strptime(date_str, "%d.%m.%Y")
        except Exception:
            print(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É: {date_str}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É")
            config_date = datetime.now()

        from_dt = config_date - timedelta(days=5)
        to_dt = datetime.now()

        print(f"\nüì• –û–±—Ä–æ–±–∫–∞ Mono –≥–∞–º–∞–Ω—Ü—è, –ø–µ—Ä—ñ–æ–¥: {from_dt.date()} - {to_dt.date()}")

        all_transactions = []
        chunk_start = from_dt
        chunk_days = 31  # —â–æ–± –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω—å –ª—ñ–º—ñ—Ç—ñ–≤

        while chunk_start < to_dt:
            chunk_end = min(chunk_start + timedelta(days=chunk_days), to_dt)
            from_time = int(chunk_start.timestamp())
            to_time = int(chunk_end.timestamp())

            print(f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ {chunk_start.date()} –ø–æ {chunk_end.date()}...")

            try:
                txs = fetch_monobank_transactions(api_key, from_time, to_time)
                if not isinstance(txs, list):
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Mono API, –æ—á—ñ–∫—É—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")
                    break
                all_transactions.extend(txs)
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π Mono: {e}")
                break

            chunk_start = chunk_end + timedelta(seconds=1)
            time.sleep(1.5)  # –∑–±—ñ–ª—å—à–µ–Ω–∞ –ø–∞—É–∑–∞, —â–æ–± –∑–Ω–∏–∑–∏—Ç–∏ —Ä–∏–∑–∏–∫ 429

        existing_rows = worksheet.get_all_values()
        header_offset = 1
        existing_tx_by_id = {}
        for i, row in enumerate(existing_rows[header_offset:], start=header_offset + 1):
            full_row = row + [""] * (25 - len(row))
            tx_id = full_row[16]
            if tx_id:
                existing_tx_by_id[tx_id] = {"row_number": i, "row_data": full_row}

        rows_to_update = []
        rows_to_append = []

        for tx in all_transactions:
            tx_id = str(tx.get("id", ""))
            if not tx_id:
                continue

            dt = datetime.fromtimestamp(tx.get("time", 0))
            timestamp = dt.strftime("%d.%m.%Y %H:%M:%S")
            amount = abs(format_amount(tx.get("amount", 0)) / 100)
            balance = abs(format_amount(tx.get("balance", 0)) / 100)
            description = tx.get("description", "")
            type_op = "debit" if tx.get("amount", 0) < 0 else "credit"

            new_row = [""] * 25
            new_row[0] = timestamp
            new_row[1] = "Mono"
            new_row[4] = type_op
            new_row[5] = amount
            new_row[6] = amount
            new_row[7] = "UAH"
            new_row[10] = description
            new_row[16] = tx_id

            if tx_id in existing_tx_by_id:
                existing = existing_tx_by_id[tx_id]
                if new_row != existing["row_data"]:
                    rows_to_update.append((existing["row_number"], new_row))
            else:
                rows_to_append.append(new_row)

        if rows_to_update:
            batch_data = [{"range": f"A{row_number}:Y{row_number}", "values": [row_data]} for row_number, row_data in rows_to_update]
            worksheet.batch_update(batch_data)
            print(f"üîÅ –û–Ω–æ–≤–ª–µ–Ω–æ {len(rows_to_update)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.")

        if rows_to_append:
            start_row = len(existing_rows) + 1
            worksheet.update(f"A{start_row}:Y{start_row + len(rows_to_append) - 1}", rows_to_append)
            print(f"‚ûï –î–æ–¥–∞–Ω–æ {len(rows_to_append)} –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ —Ä—è–¥–∫–∞ {start_row}.")
        else:
            print("‚úÖ –ù–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–µ–º–∞—î.")
        
        today_str = datetime.now().strftime("%d.%m.%Y")
        item["data"] = today_str
        print(f"üìÜ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –≤ –∫–æ–Ω—Ñ—ñ–≥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_str}")

        # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ—ñ–≥ –Ω–∞–∑–∞–¥ —É —Ñ–∞–π–ª
        config_manager(CONFIG)

